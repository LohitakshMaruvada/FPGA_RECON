-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neuron is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    angle : IN STD_LOGIC_VECTOR (31 downto 0);
    sel : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of neuron is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "neuron_neuron,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.097000,HLS_SYN_LAT=110,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1531,HLS_SYN_LUT=1414,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_64_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_77 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln38_reg_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln38_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_69_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_73_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tan_hyperbolic_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_start : STD_LOGIC;
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_done : STD_LOGIC;
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_idle : STD_LOGIC;
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_ready : STD_LOGIC;
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_x_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_x_2_out_ap_vld : STD_LOGIC;
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_y_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_y_out_ap_vld : STD_LOGIC;
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_ce : STD_LOGIC;
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_ce : STD_LOGIC;
    signal grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_64_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_64_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_69_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_69_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_73_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_73_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_64_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_64_ce : STD_LOGIC;
    signal grp_fu_69_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neuron_neuron_Pipeline_VITIS_LOOP_15_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        angle : IN STD_LOGIC_VECTOR (31 downto 0);
        x_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_2_out_ap_vld : OUT STD_LOGIC;
        y_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_out_ap_vld : OUT STD_LOGIC;
        grp_fu_64_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_64_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_64_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_64_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_64_p_ce : OUT STD_LOGIC;
        grp_fu_69_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_69_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_69_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_69_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_69_p_ce : OUT STD_LOGIC );
    end component;


    component neuron_faddfsub_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component neuron_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component neuron_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54 : component neuron_neuron_Pipeline_VITIS_LOOP_15_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_start,
        ap_done => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_done,
        ap_idle => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_idle,
        ap_ready => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_ready,
        angle => angle,
        x_2_out => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_x_2_out,
        x_2_out_ap_vld => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_x_2_out_ap_vld,
        y_out => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_y_out,
        y_out_ap_vld => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_y_out_ap_vld,
        grp_fu_64_p_din0 => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_din0,
        grp_fu_64_p_din1 => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_din1,
        grp_fu_64_p_opcode => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_opcode,
        grp_fu_64_p_dout0 => grp_fu_64_p2,
        grp_fu_64_p_ce => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_ce,
        grp_fu_69_p_din0 => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_din0,
        grp_fu_69_p_din1 => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_din1,
        grp_fu_69_p_opcode => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_opcode,
        grp_fu_69_p_dout0 => grp_fu_69_p2,
        grp_fu_69_p_ce => grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_ce);

    faddfsub_32ns_32ns_32_7_full_dsp_1_U12 : component neuron_faddfsub_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_64_p0,
        din1 => grp_fu_64_p1,
        opcode => grp_fu_64_opcode,
        ce => grp_fu_64_ce,
        dout => grp_fu_64_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U13 : component neuron_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_69_p0,
        din1 => grp_fu_69_p1,
        ce => grp_fu_69_ce,
        dout => grp_fu_69_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U14 : component neuron_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_73_p0,
        din1 => grp_fu_73_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_73_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_ready = ap_const_logic_1)) then 
                    grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_reg_122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                add1_reg_133 <= grp_fu_69_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln38_reg_122 <= icmp_ln38_fu_83_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln38_reg_122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln38_reg_122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then
                reg_77 <= grp_fu_64_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_reg_122 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                tan_hyperbolic_reg_138 <= grp_fu_73_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_done)
    begin
        if ((grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        grp_fu_73_p2 when (icmp_ln38_reg_122(0) = '1') else 
        tan_hyperbolic_reg_138;

    grp_fu_64_ce_assign_proc : process(ap_CS_fsm_state2, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_64_ce <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_ce;
        else 
            grp_fu_64_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_64_opcode_assign_proc : process(icmp_ln38_reg_122, ap_CS_fsm_state2, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_opcode, ap_CS_fsm_state3, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_64_opcode <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_opcode;
        elsif ((((icmp_ln38_reg_122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln38_reg_122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_fu_64_opcode <= ap_const_lv2_0;
        else 
            grp_fu_64_opcode <= "XX";
        end if; 
    end process;


    grp_fu_64_p0_assign_proc : process(ap_CS_fsm_state2, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_y_out, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_64_p0 <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_64_p0 <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_y_out;
        else 
            grp_fu_64_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_64_p1_assign_proc : process(ap_CS_fsm_state2, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_x_2_out, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_din1, ap_CS_fsm_state3, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_64_p1 <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_64_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_64_p1 <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_x_2_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_64_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_64_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_69_ce_assign_proc : process(ap_CS_fsm_state2, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_69_ce <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_ce;
        else 
            grp_fu_69_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_69_p0_assign_proc : process(reg_77, ap_CS_fsm_state2, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_din0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_69_p0 <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_69_p0 <= reg_77;
        else 
            grp_fu_69_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_69_p1_assign_proc : process(ap_CS_fsm_state2, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_x_2_out, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_din1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_69_p1 <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_grp_fu_69_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_69_p1 <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_x_2_out;
        else 
            grp_fu_69_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_73_p0_assign_proc : process(reg_77, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_y_out, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_73_p0 <= reg_77;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_73_p0 <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_y_out;
        else 
            grp_fu_73_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_73_p1_assign_proc : process(add1_reg_133, grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_x_2_out, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_73_p1 <= add1_reg_133;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_73_p1 <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_x_2_out;
        else 
            grp_fu_73_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_start <= grp_neuron_Pipeline_VITIS_LOOP_15_1_fu_54_ap_start_reg;
    icmp_ln38_fu_83_p2 <= "0" when (sel = ap_const_lv32_0) else "1";
end behav;
